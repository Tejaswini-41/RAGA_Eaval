
--- Similar PR #249878 ---
File: src/vs/workbench/contrib/chat/browser/actions/chatToolActions.ts
Before:
			widget.input.selectedToolsModel.update(disableToolSets, disableTools);


After:
			widget.input.selectedToolsModel.disable(disableToolSets, disableTools, false);

File: src/vs/workbench/contrib/chat/browser/actions/chatToolPicker.ts
Before:
			onUpdate?.(result);
After:
			if (onUpdate) {
				let didChange = toolsEntries.size !== result.size;
				for (const [key, value] of toolsEntries) {
					if (didChange) {
						break;
					}
					didChange = result.get(key) !== value;
				}

				if (didChange) {
					onUpdate(result);
				}
			}

File: src/vs/workbench/contrib/chat/browser/chatInputPart.ts
After:
		this.selectedToolsModel.resetSessionEnablementState();


File: src/vs/workbench/contrib/chat/browser/chatSelectedTools.ts
Before:
import { autorun, IObservable, observableFromEvent, ObservableMap, transaction } from '../../../../base/common/observable.js';
	disabledToolSets?: readonly string[];
	disabledTools?: readonly string[];
		@ILanguageModelToolsService toolsService: ILanguageModelToolsService,
		this._allTools = observableFromEvent(toolsService.onDidChangeTools, () => Array.from(toolsService.getTools()));
		const disabledDataObs = this._selectedTools.map(data => {
			return (data.disabledToolSets?.length || data.disabledTools?.length)
				? {
					toolSetIds: new Set(data.disabledToolSets),
					toolIds: new Set(data.disabledTools),
				: undefined;
			const toolSets = toolsService.toolSets.read(r);
					// only homogenous tool sets can shallow tools
	selectOnly(toolIds: readonly string[]): void {
		const uniqueTools = new Set(toolIds);
		const disabledTools = this._allTools.get().filter(tool => !uniqueTools.has(tool.id));
		this.update([], disabledTools);
	update(disabledToolSets: readonly ToolSet[], disableTools: readonly IToolData[]): void {
		this._selectedTools.set({
After:
import { autorun, derived, IObservable, observableFromEvent, ObservableMap, observableValue, transacti...[truncated]
--- Similar PR #249895 ---
File: src/vs/workbench/contrib/chat/browser/actions/chatContext.ts
Before:

After:
			if (res === 0) {
				res = a.toolInfo.label.localeCompare(b.toolInfo.label);
			}

File: src/vs/workbench/contrib/chat/browser/actions/chatToolPicker.ts
Before:
				label: toolSetOrTool.source.label,
After:
				label: localize('ext', 'Extension: {0}', toolSetOrTool.source.label),

File: src/vs/workbench/contrib/chat/common/languageModelToolsService.ts
Before:
			return { ordinal: 3, label: 'Built-In' };
			return { ordinal: 1, label: 'MCP Servers' };
			return { ordinal: 0, label: 'User Defined' };
			return { ordinal: 2, label: 'Extensions' };
After:
import { localize } from '../../../../nls.js';
			return { ordinal: 1, label: localize('builtin', 'Built-In') };
			return { ordinal: 2, label: localize('mcp', 'MCP Server: {0}', source.label) };
			return { ordinal: 0, label: localize('user', 'User Defined') };
			return { ordinal: 3, label: localize('ext', 'Extension: {0}', source.label) };


--- Similar PR #249894 ---
File: src/vs/workbench/contrib/chat/browser/chatAttachmentWidgets.ts
Before:
import { IChatRequestPasteVariableEntry, IChatRequestVariableEntry, IElementVariableEntry, INotebookOutputVariableEntry, ISCMHistoryItemVariableEntry, OmittedState } from '../common/chatModel.js';
After:
import { IChatRequestPasteVariableEntry, IChatRequestToolEntry, IChatRequestToolSetEntry, IChatRequestVariableEntry, IElementVariableEntry, INotebookOutputVariableEntry, ISCMHistoryItemVariableEntry, OmittedState } from '../common/chatModel.js';
import { ILanguageModelToolsService, ToolSet } from '../common/languageModelToolsService.js';
import { Iterable } from '../../../../base/common/iterator.js';
export class ToolSetOrToolItemAttachmentWidget extends AbstractChatAttachmentWidget {
	constructor(
		attachment: IChatRequestToolSetEntry | IChatRequestToolEntry,
		currentLanguageModel: ILanguageModelChatMetadataAndIdentifier | undefined,
		options: { shouldFocusClearButton: boolean; supportsDeletion: boolean },
		container: HTMLElement,
		contextResourceLabels: ResourceLabels,
		hoverDelegate: IHoverDelegate,
		@ILanguageModelToolsService toolsService: ILanguageModelToolsService,
		@ICommandService commandService: ICommandService,
		@IOpenerService openerService: IOpenerService,
		@IHoverService hoverService: IHoverService
	) {
		super(attachment, options, container, contextResourceLabels, hoverDelegate, currentLanguageModel, commandService, openerService);


		const toolOrToolSet = Iterable.find(toolsService.getTools(), tool => tool.id === attachment.id) ?? Iterable.find(toolsService.toolSets.get(), toolSet => toolSet.id === attachment.id);

		let name = attachment.name;
		const icon = attachment.icon ?? Codicon.tools;

		if (toolOrToolSet) {
			name = toolOrToolSet.toolReferenceName ?? name;
		}

		this.label.setLabel(`$(${icon.id})\u00A0${name}`, undefined);

		this.element.style.cursor = 'pointer';
		this.element.ariaLabel = localize('chat.attachment', "Attached context, {0}", name);

		...[truncated]