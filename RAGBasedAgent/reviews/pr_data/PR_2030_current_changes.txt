File: docs/howtos/applications/singlehop_testset_gen.md
Before:
      <td>single_hop_specifc_query_synthesizer</td>
      <td>single_hop_specifc_query_synthesizer</td>
      <td>single_hop_specifc_query_synthesizer</td>
      <td>single_hop_specifc_query_synthesizer</td>
      <td>single_hop_specifc_query_synthesizer</td>
      <td>single_hop_specifc_query_synthesizer</td>
      <td>single_hop_specifc_query_synthesizer</td>
      <td>single_hop_specifc_query_synthesizer</td>
      <td>single_hop_specifc_query_synthesizer</td>
      <td>single_hop_specifc_query_synthesizer</td>
After:
      <td>single_hop_specific_query_synthesizer</td>
      <td>single_hop_specific_query_synthesizer</td>
      <td>single_hop_specific_query_synthesizer</td>
      <td>single_hop_specific_query_synthesizer</td>
      <td>single_hop_specific_query_synthesizer</td>
      <td>single_hop_specific_query_synthesizer</td>
      <td>single_hop_specific_query_synthesizer</td>
      <td>single_hop_specific_query_synthesizer</td>
      <td>single_hop_specific_query_synthesizer</td>
      <td>single_hop_specific_query_synthesizer</td>

File: docs/howtos/customizations/testgenerator/_persona_generator.md
Before:
      <td>single_hop_specifc_query_synthesizer</td>
      <td>single_hop_specifc_query_synthesizer</td>
      <td>single_hop_specifc_query_synthesizer</td>
      <td>single_hop_specifc_query_synthesizer</td>
      <td>single_hop_specifc_query_synthesizer</td>
After:
      <td>single_hop_specific_query_synthesizer</td>
      <td>single_hop_specific_query_synthesizer</td>
      <td>single_hop_specific_query_synthesizer</td>
      <td>single_hop_specific_query_synthesizer</td>
      <td>single_hop_specific_query_synthesizer</td>

File: docs/howtos/customizations/testgenerator/persona_generator.ipynb
Before:
       "      <td>single_hop_specifc_query_synthesizer</td>\n",
       "      <td>single_hop_specifc_query_synthesizer</td>\n",
       "      <td>single_hop_specifc_query_synthesizer</td>\n",
       "      <td>single_hop_specifc_query_synthesizer</td>\n",
       "      <td>single_hop_specifc_query_synthesizer</td>\n",
       "0  What the Director do in GitLab and how they wo...  ...  single_hop_specifc_query_synthesizer\n",
       "1                Wht is the rol of the VP in GitLab?  ...  single_hop_specifc_query_synthesizer\n",
       "2             What GitLab do for career progression?  ...  single_hop_specifc_query_synthesizer\n",
       "3  Wht is the S-grop and how do they work with ot...  ...  single_hop_specifc_query_synthesizer\n",
       "4        How does Google execute its company vision?  ...  single_hop_specifc_query_synthesizer\n",
After:
       "      <td>single_hop_specific_query_synthesizer</td>\n",
       "      <td>single_hop_specific_query_synthesizer</td>\n",
       "      <td>single_hop_specific_query_synthesizer</td>\n",
       "      <td>single_hop_specific_query_synthesizer</td>\n",
       "      <td>single_hop_specific_query_synthesizer</td>\n",
       "0  What the Director do in GitLab and how they wo...  ...  single_hop_specific_query_synthesizer\n",
       "1                Wht is the rol of the VP in GitLab?  ...  single_hop_specific_query_synthesizer\n",
       "2             What GitLab do for career progression?  ...  single_hop_specific_query_synthesizer\n",
       "3  Wht is the S-grop and how do they work with ot...  ...  single_hop_specific_query_synthesizer\n",
       "4        How does Google execute its company vision?  ...  single_hop_specific_query_synthesizer\n",

File: docs/howtos/integrations/_llamaindex.md
Before:
      <td>single_hop_specifc_query_synthesizer</td>
      <td>single_hop_specifc_query_synthesizer</td>
      <td>single_hop_specifc_query_synthesizer</td>
After:
      <td>single_hop_specific_query_synthesizer</td>
      <td>single_hop_specific_query_synthesizer</td>
      <td>single_hop_specific_query_synthesizer</td>

File: docs/howtos/integrations/llamaindex.ipynb
Before:
       "      <td>single_hop_specifc_query_synthesizer</td>\n",
       "      <td>single_hop_specifc_query_synthesizer</td>\n",
       "      <td>single_hop_specifc_query_synthesizer</td>\n",
       "0  single_hop_specifc_query_synthesizer  \n",
       "1  single_hop_specifc_query_synthesizer  \n",
       "2  single_hop_specifc_query_synthesizer  \n",
After:
       "      <td>single_hop_specific_query_synthesizer</td>\n",
       "      <td>single_hop_specific_query_synthesizer</td>\n",
       "      <td>single_hop_specific_query_synthesizer</td>\n",
       "0  single_hop_specific_query_synthesizer  \n",
       "1  single_hop_specific_query_synthesizer  \n",
       "2  single_hop_specific_query_synthesizer  \n",

File: src/ragas/testset/synthesizers/multi_hop/abstract.py
Before:
    """
    Synthesizes abstract multi-hop queries from given knowledge graph.

    Attributes
    ----------
    """

            relationship_condition=lambda rel: (
                True if rel.get_property("summary_similarity") else False
            ),
        Generates a list of scenarios on type MultiHopAbstractQuerySynthesizer
            node_themes = [node.properties.get("themes", []) for node in nodes]
                property_name="themes",
After:
    """Synthesize abstract multi-hop queries from given knowledge graph."""
    relation_property: str = "summary_similarity"
    abstract_property_name: str = "themes"
        """Identify clusters of nodes based on the specified relationship condition."""
            relationship_condition=lambda rel: bool(rel.get_property(self.relation_property)),
        Generate a list of scenarios of type MultiHopScenario.

            node_themes = [node.properties.get(self.abstract_property_name, []) for node in nodes]
                property_name=self.abstract_property_name,

File: src/ragas/testset/synthesizers/multi_hop/specific.py
Before:
    """
    Synthesizes overlap based queries by choosing specific chunks and generating a
    keyphrase from them and then generating queries based on that.

    Attributes
    ----------
    generate_query_prompt : PydanticPrompt
        The prompt used for generating the query.
    """
    relation_type: str = "entities_overlap"

            relationship_condition=lambda rel: (
                True if rel.type == self.relation_type else False
            )
        Generates a list of scenarios on type MultiHopSpecificQuerySynthesizer
                overlapped_items = triplet[1].properties["overlapped_items"]
After:
    """Synthesize multi-hop queries based on a chunk cluster defined by entity overlap."""
    relation_type: str = "entities_overlap"
    relation_overlap_property: str = "overlapped_items"
        """Identify clusters of nodes based on the specified relationship condition."""
            relationship_condition=lambda rel: rel.type == self.relation_type
        Generate a list of scenarios of type MultiHopScenario.

                overlapped_items = triplet[1].properties[self.relation_overlap_property]

File: src/ragas/testset/synthesizers/single_hop/specific.py
Before:
    name: str = "single_hop_specifc_query_synthesizer"
    theme_persona_matching_prompt: PydanticPrompt = ThemesPersonasMatchingPrompt()

        Generates a list of scenarios on type SingleHopSpecificQuerySynthesizer
After:
    """Synthesize single-hop queries based on an entity of interest."""

    name: str = "single_hop_specific_query_synthesizer"
    theme_persona_matching_prompt: PydanticPrompt = ThemesPersonasMatchingPrompt()
        """Identify clusters of nodes based on the entity of interest."""
        Generate a list of scenarios of type SingleHopScenario.


