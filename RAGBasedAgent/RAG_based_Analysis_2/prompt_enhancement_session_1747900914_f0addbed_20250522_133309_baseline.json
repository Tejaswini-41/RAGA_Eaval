{
  "timestamp": "20250522_133309",
  "original_system_prompt": "You are an expert code reviewer. Provide detailed, actionable feedback:\n\n1. Technical Accuracy\n- Reference specific files, functions, and line numbers\n- Explain the impact of each change\n- Ground suggestions in the code context\n\n2. Completeness\n- Cover all changed files and their dependencies\n- Analyze potential impacts thoroughly\n- Include test coverage requirements\n\n3. Faithfulness\n- Base all suggestions on the actual code\n- Avoid assumptions without evidence\n- Link suggestions to specific code patterns\n\nKeep suggestions practical and implementation-ready.",
  "enhanced_system_prompt": "You are a highly precise and thorough code reviewer. Your task is to provide a comprehensive and actionable review focusing on technical accuracy and completeness.  Your feedback must be directly grounded in the provided code, referencing specific files, functions, and line numbers for every suggestion.  Avoid speculation; all feedback must be demonstrably supported by the code itself.\n\n**Structure your review as follows:**\n\n1. **Overview:** Briefly summarize the overall changes and their potential impact.\n\n2. **Detailed Review (per file):** For each changed file, provide a section detailing your findings.  Include:\n    * **File Name:** Clearly state the file being reviewed.\n    * **Line Number(s):** Specify the exact line numbers relevant to each comment.\n    * **Description of Change:** Concisely describe the change made on the specified line(s).\n    * **Technical Accuracy Assessment:**  Analyze the correctness of the code changes, identifying potential bugs, inefficiencies, or vulnerabilities.  Provide specific examples and justifications.\n    * **Completeness Assessment:**  Evaluate if all relevant aspects of the change are addressed. Identify missing components, potential side-effects, or areas needing further clarification.\n    * **Actionable Suggestions:** Offer clear, practical, and implementable suggestions to improve the code's quality, correctness, and maintainability.  Prioritize suggestions based on impact and feasibility.\n    * **Test Coverage Requirements:**  Specify the necessary unit tests or integration tests required to ensure the correctness and robustness of the changes.\n\n3. **Summary:** Briefly summarize your key findings and recommendations.\n\nMaintain a formal and professional tone.  All suggestions must be directly linked to specific code patterns and avoid any assumptions not explicitly supported by the code itself.  Prioritize clarity and conciseness in your language. Ensure your review is complete, covering all changed files and their dependencies.",
  "baseline_metrics": {
    "deepseek": {
      "Relevance": 0.7405186891555786,
      "Accuracy": 0.85,
      "Groundedness": 0.8,
      "Completeness": 0.2,
      "Faithfulness": 0.0,
      "ContextualPrecision": 0.0,
      "AnswerRelevance": 0.6699999999999999,
      "BLEU": 0.0661476354612817,
      "ROUGE": 0.17552334943639292,
      "Overall": 0.408
    },
    "llama": {
      "Relevance": 0.7172614336013794,
      "Accuracy": 0.8,
      "Groundedness": 0.6,
      "Completeness": 0.3,
      "Faithfulness": 0.0,
      "ContextualPrecision": 0.8,
      "AnswerRelevance": 1.0,
      "BLEU": 0.26538560855362214,
      "ROUGE": 0.18945634266886327,
      "Overall": 0.643
    },
    "alibaba": {
      "Relevance": 0.7657867670059204,
      "Accuracy": 0.9,
      "Groundedness": 0.8,
      "Completeness": 0.2,
      "Faithfulness": 0.5,
      "ContextualPrecision": 0.0,
      "AnswerRelevance": 0.33999999999999997,
      "BLEU": 0.1607862695557347,
      "ROUGE": 0.14250207125103562,
      "Overall": 0.47
    }
  },
  "best_model": "llama",
  "baseline_review": "## Summary\nThe current PR involves refactoring the chat attachment functionality in the VS Workbench. The key changes include:\n\n*   Replacing `attachPrompts` with `attachPrompt` to handle attaching a single prompt to a chat input.\n*   Introducing `detachPrompt` to detach a prompt from a chat input.\n*   Updating the `ChatPromptAttachmentsCollection` to track whether an attachment already exists.\n\nThe purpose of these changes is to improve the handling of chat attachments, making it more efficient and accurate.\n\n## File Changes\n\nThe following files require updates:\n\n1.  **src/vs/workbench/contrib/chat/browser/actions/reusablePromptActions/chatAttachPromptAction.ts**\n\n    *   Before: `import { attachPrompts, IAttachPromptOptions } from './dialogs/askToSelectPrompt/utils/attachPrompts.js';`\n    *   After: `import { attachPrompt, IAttachPromptOptions } from './dialogs/askToSelectPrompt/utils/attachPrompt.js';`\n    *   Impact: Replaces `attachPrompts` with `attachPrompt` to handle attaching a single prompt.\n\n2.  **src/vs/workbench/contrib/chat/browser/actions/reusablePromptActions/chatRunPromptAction.ts**\n\n    *   Before: `import { runAttachPromptAction } from './chatAttachPromptAction.js';`\n    *   After: `import { IChatWidget } from '../../chat.js'; import { attachPrompt } from './dialogs/askToSelectPrompt/utils/attachPrompt.js'; import { detachPrompt } from './dialogs/askToSelectPrompt/utils/detachPrompt.js';`\n    *   Impact: Replaces `runAttachPromptAction` with `attachPrompt` and introduces `detachPrompt`.\n\n3.  **src/vs/workbench/contrib/chat/browser/actions/reusablePromptActions/dialogs/askToSelectPrompt/askToSelectPrompt.ts**\n\n    *   Before: `import { attachPrompts } from './utils/attachPrompts.js';`\n    *   After: `import { attachPrompt } from './utils/attachPrompt.js';`\n    *   Impact: Replaces `attachPrompts` with `attachPrompt`.\n\n4.  **src/vs/workbench/contrib/chat/browser/actions/reusablePromptActions/dialogs/askToSelectPrompt/utils/attachPrompt.ts**\n\n    *   Before: `export const attachPrompts = async (files: readonly WithUriValue<Object>",
  "session_id": "session_1747900914_f0addbed",
  "current_pr_changes": "File: src/vs/workbench/contrib/chat/browser/actions/reusablePromptActions/chatAttachPromptAction.ts\nBefore:\nimport { attachPrompts, IAttachPromptOptions } from './dialogs/askToSelectPrompt/utils/attachPrompts.js';\n\t\t\tconst widget = await attachPrompts(\n\t\t\t\t[{ value: resource }],\nAfter:\nimport { attachPrompt, IAttachPromptOptions } from './dialogs/askToSelectPrompt/utils/attachPrompt.js';\n\t\t\tconst { widget } = await attachPrompt(\n\t\t\t\tresource,\n\nFile: src/vs/workbench/contrib/chat/browser/actions/reusablePromptActions/chatRunPromptAction.ts\nBefore:\nimport { runAttachPromptAction } from './chatAttachPromptAction.js';\n\t): Promise<void> {\n\t\treturn await runAttachPromptAction({\n\t\t\tinNewChat,\n\t\t\tskipSelectionDialog: true,\n\t\t}, commandService);\n\t): Promise<void> {\n\t): Promise<void> {\nAfter:\nimport { IChatWidget } from '../../chat.js';\nimport { attachPrompt } from './dialogs/askToSelectPrompt/utils/attachPrompt.js';\nimport { detachPrompt } from './dialogs/askToSelectPrompt/utils/detachPrompt.js';\nimport { IViewsService } from '../../../../../services/views/common/viewsService.js';\n\t): Promise<IChatWidget> {\n\t\tconst viewsService = accessor.get(IViewsService);\n\t\tconst { widget, wasAlreadyAttached } = await attachPrompt(\n\t\t\t{\n\t\t\t\tinNewChat,\n\t\t\t\tcommandService,\n\t\t\t\tviewsService,\n\t\t\t},\n\t\t);\n\n\t\t// submit the prompt immediately\n\t\tawait widget.acceptInput();\n\n\t\t// detach the prompt immediately, unless was attached\n\t\t// before the action was executed\n\t\tif (wasAlreadyAttached === false) {\n\t\t\tawait detachPrompt(resource, { widget });\n\t\t}\n\n\t\treturn widget;\n\t): Promise<IChatWidget> {\n\t): Promise<IChatWidget> {\n\nFile: src/vs/workbench/contrib/chat/browser/actions/reusablePromptActions/dialogs/askToSelectPrompt/askToSelectPrompt.ts\nBefore:\nimport { attachPrompts } from './utils/attachPrompts.js';\n\t\t\tlastActiveWidget = await attachPrompts(\n\t\t\t\tselectedItems,\nAfter:\nimport { attachPrompt } from './utils/attachPrompt.js';\n\t\t\tconst attachResult = await attachPrompt(\n\t\t\t\tselectedOption.value,\n\t\t\tlastActiveWidget = attachResult.widget;\n\nFile: src/vs/workbench/contrib/chat/browser/actions/reusablePromptActions/dialogs/askToSelectPrompt/utils/attachPrompt.ts\nBefore:\nimport { assertDefined, WithUriValue } from '../../../../../../../../../base/common/types.js';\n * Options for the {@link attachPrompts} function.\nexport const attachPrompts = async (\n\tfiles: readonly WithUriValue<Object>[],\n): Promise<IChatWidget> => {\n\tfor (const file of files) {\n\t\twidget\n\t\t\t.attachmentModel\n\t\t\t.promptInstructions\n\t\t\t.add(file.value);\n\t}\n\treturn widget;\nAfter:\nimport { URI } from '../../../../../../../../../base/common/uri.js';\nimport { assertDefined } from '../../../../../../../../../base/common/types.js';\n * Options for the {@link attachPrompt} function.\n/**\n * Return value of the {@link attachPrompt} function.\n */\ninterface IAttachResult {\n\treadonly widget: IChatWidget;\n\treadonly wasAlreadyAttached: boolean;\n}\n\nexport const attachPrompt = async (\n\tfile: URI,\n): Promise<IAttachResult> => {\n\tconst wasAlreadyAttached = widget\n\t\t.attachmentModel\n\t\t.promptInstructions\n\t\t.add(file);\n\treturn { widget, wasAlreadyAttached };\n\nFile: src/vs/workbench/contrib/chat/browser/actions/reusablePromptActions/dialogs/askToSelectPrompt/utils/detachPrompt.ts\nAfter:\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChatWidget } from '../../../../../chat.js';\nimport { URI } from '../../../../../../../../../base/common/uri.js';\n\n/**\n * Options for the {@link detachPrompt} function.\n */\nexport interface IDetachPromptOptions {\n\t/**\n\t * Chat widget instance to attach the prompt to.\n\t */\n\treadonly widget: IChatWidget;\n}\n\n/**\n * Detaches provided prompts to a chat input.\n */\nexport const detachPrompt = async (\n\tfile: URI,\n\toptions: IDetachPromptOptions,\n): Promise<IChatWidget> => {\n\tconst { widget } = options;\n\n\twidget\n\t\t.attachmentModel\n\t\t.promptInstructions\n\t\t.remove(file);\n\n\treturn widget;\n};\n\nFile: src/vs/workbench/contrib/chat/browser/chatAttachmentModel/chatPromptAttachmentsCollection.ts\nBefore:\n\tpublic add(uri: URI): this {\n\t\t\treturn this;\n\t\treturn this;\nAfter:\n\t *\n\t * @returns `true` if the attachment already exists, `false` otherwise.\n\tpublic add(uri: URI): boolean {\n\t\t\treturn true;\n\t\treturn false;\n\n",
  "similar_prs_changes": [
    {
      "pr_number": 249473,
      "changes": "File: src/vs/workbench/contrib/chat/browser/attachments/implicitContextAttachment.ts\nBefore:\nimport { Button } from '../../../../../base/browser/ui/button/button.js';\nimport { getDefaultHoverDelegate } from '../../../../../base/browser/ui/hover/hoverDelegateFactory.js';\nimport { IHoverService } from '../../../../../platform/hover/browser/hover.js';\n\t\t@IHoverService private readonly hoverService: IHoverService,\n\t\tthis.domNode.classList.toggle('disabled', !this.attachment.enabled);\n\t\tconst range = URI.isUri(this.attachment.value) || !this.attachment.isSelection ? undefined : this.attachment.value!.range;\n\t\tconst ariaLabel = range ? localize('chat.fileAttachmentWithRange', \"Attached {0}, {1}, line {2} to line {3}\", attachmentTypeName, friendlyName, range.startLineNumber, range.endLineNumber) : localize('chat.fileAttachment', \"Attached {0}, {1}\", attachmentTypeName, friendlyName);\n\t\tconst hintLabel = localize('hint.label.current', \"Current {0}\", attachmentTypeName);\n\t\tconst hintElement = dom.append(this.domNode, dom.$('span.chat-implicit-hint', undefined, hintLabel));\n\t\tthis._register(this.hoverService.setupManagedHover(getDefaultHoverDelegate('element'), hintElement, title));\n\n\t\tconst buttonMsg = this.attachment.enabled ? localize('disable', \"Disable current {0} context\", attachmentTypeName) : localize('enable', \"Enable current {0} context\", attachmentTypeName);\n\t\tconst toggleButton = this.renderDisposables.add(new Button(this.domNode, { supportIcons: true, title: buttonMsg }));\n\t\ttoggleButton.icon = this.attachment.enabled ? Codicon.eye : Codicon.eyeClosed;\n\t\tthis.renderDisposables.add(toggleButton.onDidClick((e) => {\n\t\t\te.stopPropagation(); // prevent it from triggering the click handler on the parent immediately after rerendering\n\t\t\tthis.attachment.enabled = !this.attachment.enabled;\nAfter:\nimport { ChatAttachmentModel } from '../chatAttachmentModel.js';\n\t\tprivate readonly attachmentModel: ChatAttachmentModel,\n\t\tthis.domNode.classList.add('disabled');\n\t\tconst range ...[truncated]"
    },
    {
      "pr_number": 249497,
      "changes": "File: src/vs/workbench/api/common/extHostLanguageModelTools.ts\nBefore:\n\t\t\t\t\ttitle: result.confirmationMessages.title,\n\t\t\t\t\ttitle: result.confirmationMessages.title,\nAfter:\n\t\t\t\t\ttitle: typeof result.confirmationMessages.title === 'string' ? result.confirmationMessages.title : typeConvert.MarkdownString.from(result.confirmationMessages.title),\n\t\t\t\t\ttitle: typeof result.confirmationMessages.title === 'string' ? result.confirmationMessages.title : typeConvert.MarkdownString.from(result.confirmationMessages.title),\n\nFile: src/vs/workbench/contrib/chat/browser/chatAccessibilityProvider.ts\nBefore:\n\t\t\t\t\ttoolInvocationHint += localize('toolCompletedHint', \"Tool {0} completed.\", invocation.confirmationMessages?.title);\nAfter:\n\t\t\t\t\ttoolInvocationHint += localize('toolCompletedHint', \"Tool {0} completed.\", typeof invocation.confirmationMessages?.title === 'string' ? invocation.confirmationMessages?.title : invocation.confirmationMessages?.title.value);\n\nFile: src/vs/workbench/contrib/chat/browser/chatContentParts/chatConfirmationWidget.ts\nBefore:\n\t\ttitle: string,\n\t\ttitle: string,\n\t\ttitle: string,\nAfter:\n\t\ttitle: string | IMarkdownString,\n\t\ttitle: string | IMarkdownString,\n\t\ttitle: string | IMarkdownString,\n\nFile: src/vs/workbench/contrib/chat/browser/chatContentParts/toolInvocationParts/chatTerminalToolSubPart.ts\nBefore:\n\t\t\t\tariaLabel: title\nAfter:\n\t\t\t\tariaLabel: typeof title === 'string' ? title : title.value\n\nFile: src/vs/workbench/contrib/chat/browser/chatContentParts/toolInvocationParts/chatToolConfirmationSubPart.ts\nBefore:\n\t\t\t\t\tariaLabel: title\n\t\t\t\t\t\tariaLabel: toolInvocation.confirmationMessages.title\nAfter:\n\t\t\t\t\tariaLabel: typeof title === 'string' ? title : title.value\n\t\t\t\t\t\tariaLabel: typeof toolInvocation.confirmationMessages.title === 'string' ? toolInvocation.confirmationMessages.title : toolInvocation.confirmationMessages.title.value\n\nFile: src/vs/workbench/contrib/chat/browser/languageModelToolsService.ts\nBefore:\n\t\t\t\t\tconst result = await this._dialogService.conf...[truncated]"
    },
    {
      "pr_number": 249469,
      "changes": "File: src/vs/workbench/contrib/chat/browser/chatWidget.ts\nBefore:\nimport { pick } from '../../../../base/common/arrays.js';\nimport { isLocation, Location } from '../../../../editor/common/languages.js';\n\t\tif (!attachedContext.some(variable => isPromptFileChatVariable(variable) && isEqual(toUri(variable), promptPath.uri))) {\n\t\t\t.filter(pick('isRoot'));\n\t\tconst promptUris = promptFileVariables.map(toUri);\n\t\tassert(\n\t\t\tthis.inputPart.currentMode === ChatMode.Agent,\n\t\t\t`Chat mode must be 'agent' when there are 'tools' defined, got ${this.inputPart.currentMode}.`,\n\t\t);\n\t\t\t.map(pick('id'));\n\t\t\t.filter(hasAddressableValue)\n\t\t\t.map(toUri);\n/**\n * Type for any \"addressable\" object - i.e., an object that has\n * the `value` property that is either a {@link URI} or a {@link Location}.\n */\nexport type TAddressable<T extends object> = T & { value: URI | Location };\n\n/**\n * Check if provided object is \"addressable\" - i.e., has the `value`\n * property that is either a {@link URI} or a {@link Location}.\n */\nconst hasAddressableValue = <T extends object>(\n\tthing: T,\n): thing is TAddressable<T> => {\n\tif ((!thing) || (('value' in thing) === false)) {\n\t\treturn false;\n\t}\n\n\tif (URI.isUri(thing.value) || isLocation(thing.value)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Returns URI of a provided \"addressable\" object.\n */\nconst toUri = <T extends object>(\n\tthing: TAddressable<T>,\n): URI => {\n\tconst { value } = thing;\n\n\treturn URI.isUri(value)\n\t\t? value\n\t\t: value.uri;\n};\nAfter:\n\t\tif (!attachedContext.some(variable => isPromptFileChatVariable(variable) && isEqual(IChatRequestVariableEntry.toUri(variable), promptPath.uri))) {\n\t\t\t.filter(e => e.isRoot);\n\t\tconst promptUris = promptFileVariables.map(IChatRequestVariableEntry.toUri).filter(isDefined);\n\t\t\t// NOTE this is a prompt and therefore not localized\n\t\tassert(this.inputPart.currentMode === ChatMode.Agent, `Chat mode must be 'agent' when there are 'tools' defined, got ${this.inputPart.currentMode}.`);\n\n\t\t\t.map(tool => tool.id);\n\n\t\t\t.map(...[truncated]"
    }
  ],
  "pr_files": [
    "src/vs/workbench/contrib/chat/browser/actions/reusablePromptActions/chatAttachPromptAction.ts",
    "src/vs/workbench/contrib/chat/browser/actions/reusablePromptActions/chatRunPromptAction.ts",
    "src/vs/workbench/contrib/chat/browser/actions/reusablePromptActions/dialogs/askToSelectPrompt/askToSelectPrompt.ts",
    "src/vs/workbench/contrib/chat/browser/actions/reusablePromptActions/dialogs/askToSelectPrompt/utils/attachPrompt.ts",
    "src/vs/workbench/contrib/chat/browser/actions/reusablePromptActions/dialogs/askToSelectPrompt/utils/detachPrompt.ts",
    "src/vs/workbench/contrib/chat/browser/chatAttachmentModel/chatPromptAttachmentsCollection.ts"
  ]
}