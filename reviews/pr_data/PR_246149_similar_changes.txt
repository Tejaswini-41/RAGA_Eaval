
--- Similar PR #246364 ---
File: src/vs/workbench/contrib/chat/browser/actions/reusablePromptActions/chatRunPromptAction.ts
After:
				skipIfImplicitlyAttached: true,

File: src/vs/workbench/contrib/chat/browser/actions/reusablePromptActions/dialogs/askToSelectPrompt/utils/attachPrompt.ts
After:
import { extUri } from '../../../../../../../../../base/common/resources.js';
	/**
	 * Whether to skip attaching provided prompt if it is
	 * already attached as an implicit  "current file" context.
	 */
	readonly skipIfImplicitlyAttached?: boolean;

/**
 * Check if provided uri is already attached to chat
 * input as an implicit  "current file" context.
 */
const isAttachedAsCurrentPrompt = (
	promptUri: URI,
	widget: IChatWidget,
): boolean => {
	const { implicitContext } = widget.input;
	if (implicitContext === undefined) {
		return false;
	}

	if (implicitContext.isPrompt === false) {
		return false;
	}

	if (implicitContext.enabled === false) {
		return false;
	}

	assertDefined(
		implicitContext.value,
		'Prompt value must always be defined.',
	);

	const uri = URI.isUri(implicitContext.value)
		? implicitContext.value
		: implicitContext.value.uri;

	return extUri.isEqual(promptUri, uri);
};

	const { skipIfImplicitlyAttached } = options;

	if (skipIfImplicitlyAttached && isAttachedAsCurrentPrompt(file, widget)) {
		return { widget, wasAlreadyAttached: true };
	}


File: src/vs/workbench/contrib/chat/browser/chatInputPart.ts
Before:
		return !this.instructionAttachmentsPart.empty;
	// A funtion that filters out specifically the `value` property of the attachment.
		const hasAttachments = Boolean(attachments.length) || Boolean(this.implicitContext?.value) || !this.instructionAttachmentsPart.empty;
		this.promptInstructionsAttached.set(!this.instructionAttachmentsPart.empty);
After:
		// if prompt attached explicitly as a "prompt" attachment
		if (this.instructionAttachmentsPart.empty === false) {
			return true;
		}

		if (this.implicitContext === undefined) {
			return false;
		}

		// if prom...[truncated]
--- Similar PR #246349 ---
File: src/vs/workbench/contrib/chat/browser/actions/chatContextActions.ts
Before:
			if (editorService.activeTextEditorControl && activeUri && [Schemas.file, Schemas.vscodeRemote, Schemas.untitled].includes(activeUri.scheme)) {
				const selection = activeEditor?.getSelection();
					(await showChatView(accessor.get(IViewsService)))?.focusInput();
After:
			if (activeEditor && activeUri && [Schemas.file, Schemas.vscodeRemote, Schemas.untitled].includes(activeUri.scheme)) {
				const selection = activeEditor.getSelection();
					widget.focusInput();


--- Similar PR #246350 ---
File: src/vs/workbench/contrib/chat/browser/attachments/implicitContextAttachment.ts
Before:
		const ariaLabel = range ? localize('chat.fileAttachmentWithRange', "Attached file, {0}, line {1} to line {2}", friendlyName, range.startLineNumber, range.endLineNumber) : localize('chat.fileAttachment', "Attached file, {0}", friendlyName);
		const currentFile = localize('openEditor', "Current file context");
			title
		const hintElement = dom.append(this.domNode, dom.$('span.chat-implicit-hint', undefined, 'Current file'));
		const buttonMsg = this.attachment.enabled ? localize('disable', "Disable current file context") : localize('enable', "Enable current file context");
After:
import { ThemeIcon } from '../../../../../base/common/themables.js';
		const attachmentTypeName = (this.attachment.isPrompt === false)
			? localize('file.lowercase', "file")
			: localize('prompt.lowercase', "prompt");

		const ariaLabel = range ? localize('chat.fileAttachmentWithRange', "Attached {0}, {1}, line {2} to line {3}", attachmentTypeName, friendlyName, range.startLineNumber, range.endLineNumber) : localize('chat.fileAttachment', "Attached {0}, {1}", attachmentTypeName, friendlyName);
		const currentFile = localize('openEditor', "Current {0} context", attachmentTypeName);

		const icon = (this.attachment.isPrompt)
			? ThemeIcon.fromId(Codicon.bookmark.id)
			: undefined;

			title,
			icon,

		const hintLabel = localize('hint.label.current', "Current {0}", attachmentTypeName);
		const hintElement = dom.append(this.domNode, dom.$('span.chat-implicit-hint', undefined, hintLabel));
		const buttonMsg = this.attachment.enabled ? localize('disable', "Disable current {0} context", attachmentTypeName) : localize('enable', "Enable current {0} context", attachmentTypeName);

File: src/vs/workbench/contrib/chat/browser/chatAttachmentModel/chatPromptAttachmentsCollection.ts
Before:
	// for prompt files, we add a prefix to the `id`
		// the default prefix that is used for all prompt files
		let pref...[truncated]