
--- Similar PR #246150 ---
File: src/vs/workbench/contrib/chat/browser/chatInputPart.ts
Before:
	initForNewChatModel(state: IChatViewState): void {
After:
import { IWorkbenchAssignmentService } from '../../../services/assignment/common/assignmentService.js';
	widgetViewKindTag: string;
		@IWorkbenchAssignmentService private readonly experimentService: IWorkbenchAssignmentService,
	initForNewChatModel(state: IChatViewState, modelIsEmpty: boolean): void {

		if (modelIsEmpty) {
			const storageKey = this.getDefaultModeExperimentStorageKey();
			const hasSetDefaultMode = this.storageService.getBoolean(storageKey, StorageScope.WORKSPACE, false);
			if (!hasSetDefaultMode) {
				Promise.all([
					this.experimentService.getTreatment('chat.defaultMode'),
					this.experimentService.getTreatment('chat.defaultLanguageModel'),
				]).then(([defaultModeTreatment, defaultLanguageModelTreatment]) => {
					if (typeof defaultModeTreatment === 'string') {
						this.storageService.store(storageKey, true, StorageScope.WORKSPACE, StorageTarget.MACHINE);
						const defaultMode = validateChatMode(defaultModeTreatment);
						if (defaultMode) {
							this.logService.trace(`Applying default mode from experiment: ${defaultMode}`);
							this.setChatMode(defaultMode);
							this.checkModelSupported();
						}
					}

					if (typeof defaultLanguageModelTreatment === 'string' && this._currentMode === ChatMode.Agent) {
						this.storageService.store(storageKey, true, StorageScope.WORKSPACE, StorageTarget.MACHINE);
						this.logService.trace(`Applying default language model from experiment: ${defaultLanguageModelTreatment}`);
						this.setExpModelOrWait(defaultLanguageModelTreatment);
					}
				});
			}
		}
	}

	private setExpModelOrWait(modelId: string) {
		const model = this.languageModelsService.lookupLanguageModel(modelId);
		if (model) {
			this.setCurrentLanguageModel({ metadata: model, identifier: modelId });
			this.checkModelSupported();
			this._waitForPersistedLanguageModel.clear();
		} else {
			this._waitForPersistedLanguageModel.value = this.languageModelsService.onDidChangeLanguageModels(e => {
				const model = e.added?.find(m => m.identifier === modelId);
				if (model) {
					this._waitForPersistedLanguageModel.clear();

					if (model.metadata.isUserSelectable) {
						this.setCurrentLanguageModel({ metadata: model.metadata, identifier: modelId });
						this.checkModelSupported();
					}
				}
			});
		}
	}

	private getDefaultModeExperimentStorageKey(): string {
		const tag = this.options.widgetViewKindTag;
		return `chat.${tag}.hasSetDefaultModeByExperiment`;

File: src/vs/workbench/contrib/chat/browser/chatWidget.ts
Before:
		this.inputPart.initForNewChatModel(viewState);
After:
	private getWidgetViewKindTag(): string {
		if (!this.viewContext) {
			return 'editor';
		} else if ('viewId' in this.viewContext) {
			return 'view';
		} else {
			return 'quick';
		}
	}

				widgetViewKindTag: this.getWidgetViewKindTag()
		this.inputPart.initForNewChatModel(viewState, model.getRequests().length === 0);


--- Similar PR #246151 ---
File: src/vs/workbench/contrib/chat/browser/chatInputPart.ts
Before:
	initForNewChatModel(state: IChatViewState): void {
After:
import { IWorkbenchAssignmentService } from '../../../services/assignment/common/assignmentService.js';
	widgetViewKindTag: string;
		@IWorkbenchAssignmentService private readonly experimentService: IWorkbenchAssignmentService,
	initForNewChatModel(state: IChatViewState, modelIsEmpty: boolean): void {

		// TODO@roblourens This is for an experiment which will be obsolete in a month or two and can then be removed.
		if (modelIsEmpty) {
			const storageKey = this.getDefaultModeExperimentStorageKey();
			const hasSetDefaultMode = this.storageService.getBoolean(storageKey, StorageScope.WORKSPACE, false);
			if (!hasSetDefaultMode) {
				Promise.all([
					this.experimentService.getTreatment('chat.defaultMode'),
					this.experimentService.getTreatment('chat.defaultLanguageModel'),
				]).then(([defaultModeTreatment, defaultLanguageModelTreatment]) => {
					if (typeof defaultModeTreatment === 'string') {
						this.storageService.store(storageKey, true, StorageScope.WORKSPACE, StorageTarget.MACHINE);
						const defaultMode = validateChatMode(defaultModeTreatment);
						if (defaultMode) {
							this.logService.trace(`Applying default mode from experiment: ${defaultMode}`);
							this.setChatMode(defaultMode);
							this.checkModelSupported();
						}
					}

					if (typeof defaultLanguageModelTreatment === 'string' && this._currentMode === ChatMode.Agent) {
						this.storageService.store(storageKey, true, StorageScope.WORKSPACE, StorageTarget.MACHINE);
						this.logService.trace(`Applying default language model from experiment: ${defaultLanguageModelTreatment}`);
						this.setExpModelOrWait(defaultLanguageModelTreatment);
					}
				});
			}
		}
	}

	private setExpModelOrWait(modelId: string) {
		const model = this.languageModelsService.lookupLanguageModel(modelId);
		if (model) {
			this.setCurrentLanguageModel({ metadata: model, identifier: modelId });
			this.checkModelSupported();
			this._waitForPersistedLanguageModel.clear();
		} else {
			this._waitForPersistedLanguageModel.value = this.languageModelsService.onDidChangeLanguageModels(e => {
				const model = e.added?.find(m => m.identifier === modelId);
				if (model) {
					this._waitForPersistedLanguageModel.clear();

					if (model.metadata.isUserSelectable) {
						this.setCurrentLanguageModel({ metadata: model.metadata, identifier: modelId });
						this.checkModelSupported();
					}
				}
			});
		}
	}

	private getDefaultModeExperimentStorageKey(): string {
		const tag = this.options.widgetViewKindTag;
		return `chat.${tag}.hasSetDefaultModeByExperiment`;

File: src/vs/workbench/contrib/chat/browser/chatWidget.ts
Before:
		this.inputPart.initForNewChatModel(viewState);
After:
	private getWidgetViewKindTag(): string {
		if (!this.viewContext) {
			return 'editor';
		} else if ('viewId' in this.viewContext) {
			return 'view';
		} else {
			return 'quick';
		}
	}

				widgetViewKindTag: this.getWidgetViewKindTag()
		this.inputPart.initForNewChatModel(viewState, model.getRequests().length === 0);

